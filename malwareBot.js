// Enhanced Malware Detection Bot

class MalwareBot {
    constructor() {
        // Expanded malware patterns with more sophisticated detection
        this.malwarePatterns = [
            // JavaScript execution patterns
            { pattern: /eval\(.*\)/i, risk: 'high', description: 'Suspicious eval() usage', category: 'code-execution' },
            { pattern: /new\s+Function\s*\(/i, risk: 'high', description: 'Dynamic function creation', category: 'code-execution' },
            { pattern: /setTimeout\s*\(\s*['"].*['"]\s*\)/i, risk: 'medium', description: 'Suspicious setTimeout usage', category: 'code-execution' },
            
            // Obfuscation patterns
            { pattern: /\b(atob|btoa)\(.*\)/i, risk: 'medium', description: 'Base64 encoding/decoding', category: 'obfuscation' },
            { pattern: /\bunescape\(.*\)/i, risk: 'medium', description: 'URL encoding manipulation', category: 'obfuscation' },
            
            // Cryptocurrency mining patterns
            { pattern: /Cryptonight|WASMminer|deepMiner/i, risk: 'high', description: 'Cryptocurrency mining script', category: 'cryptomining' },
            
            // Redirection patterns
            { pattern: /window\.location\s*=|document\.location\s*=/i, risk: 'high', description: 'Forced redirection', category: 'redirection' },
            
            // Script injection patterns
            { pattern: /document\.write\(.*\)/i, risk: 'high', description: 'Dynamic content injection', category: 'script-injection' },
            { pattern: /\.innerHTML\s*=(?![^]*?\$\{)/i, risk: 'medium', description: 'DOM manipulation', category: 'script-injection' },
            
            // External source loading
            { pattern: /\.(src|href)\s*=\s*['"][^'"]*\.(ru|cn|su|pk)\/['"]/, risk: 'high', description: 'Loading from suspicious domains', category: 'external-source' }
        ];
    }

    generateRecommendations(detections) {
        const recommendations = new Set();
        const categories = {};
        
        // Count detections by category and risk
        detections.forEach(detection => {
            if (!categories[detection.category]) {
                categories[detection.category] = { high: 0, medium: 0, low: 0 };
            }
            categories[detection.category][detection.risk]++;
        });
        
        // Generate specific recommendations based on threats
        if (categories['code-execution'] && (categories['code-execution'].high > 0 || categories['code-execution'].medium > 0)) {
            recommendations.add('Block this website immediately as it contains potentially dangerous code execution');
        }
        
        if (categories['obfuscation'] && categories['obfuscation'].high > 0) {
            recommendations.add('Website contains heavily obfuscated code which may be hiding malicious behavior');
        }
        
        if (categories['cryptomining'] && categories['cryptomining'].high > 0) {
            recommendations.add('Cryptocurrency mining scripts detected - this site may be using your computer resources without permission');
        }
        
        if (categories['redirection'] && categories['redirection'].high > 0) {
            recommendations.add('This site contains suspicious redirects that may lead to malicious websites');
        }
        
        if (categories['script-injection'] && categories['script-injection'].high > 0) {
            recommendations.add('Dynamic script injection detected - this is a common technique used in malware');
        }
        
        if (categories['external-source'] && categories['external-source'].high > 0) {
            recommendations.add('Scripts from suspicious external domains detected');
        }
        
        // Add general recommendations
        if (detections.some(d => d.risk === 'high')) {
            recommendations.add('Do not enter any personal information or credentials on this website');
            recommendations.add('Consider reporting this website to Google Safe Browsing or similar services');
        }
        
        // If no specific recommendations were generated, add a generic one
        if (recommendations.size === 0) {
            recommendations.add('Exercise caution when interacting with this website');
            recommendations.add('Keep your browser and security software updated');
        }
        
        // Ensure we always return an array, even if recommendations is empty
        const recommendationArray = Array.from(recommendations);
        return recommendationArray.length > 0 ? recommendationArray : ['No specific security recommendations at this time'];
    }
    async scanMalware(url) {
        try {
            console.log(`MalwareBot: Starting malware scan for ${url}`);
            
            // Initialize scan data
            this.scanProgress = 0;
            this.scanStatus = 'scanning';
            this.scanDetails = [];
            this.addScanDetail('Starting comprehensive malware analysis...', 'info');
            
            // Fetch the page content
            this.scanProgress = 30;
            this.addScanDetail('Fetching page content...', 'info');
            const response = await fetch(url);
            const html = await response.text();
            
            // Analyze content for malware patterns
            this.scanProgress = 60;
            this.addScanDetail('Analyzing content for malicious patterns...', 'info');
            const detections = this.detectMalwarePatterns(html);
            
            // Generate recommendations based on detections
            this.scanProgress = 80;
            this.addScanDetail(`Found ${detections.length} suspicious patterns`, detections.length > 0 ? 'warning' : 'success');
            const recommendations = this.generateRecommendations(detections);
            
            // Prepare result
            this.scanProgress = 100;
            this.scanStatus = 'complete';
            
            let result;
            if (detections.some(d => d.risk === 'high')) {
                this.addScanDetail('High-risk malware patterns detected', 'danger');
                result = {
                    status: 'Dangerous',
                    details: 'Malicious code detected',
                    confidence: 'High',
                    threats: detections,
                    recommendations: recommendations
                };
            } else if (detections.some(d => d.risk === 'medium')) {
                this.addScanDetail('Suspicious code patterns detected', 'warning');
                result = {
                    status: 'Suspicious',
                    details: 'Potentially malicious code detected',
                    confidence: 'Medium',
                    threats: detections,
                    recommendations: recommendations
                };
            } else if (detections.length > 0) {
                this.addScanDetail('Low-risk code patterns detected', 'info');
                result = {
                    status: 'Warning',
                    details: 'Some suspicious patterns detected',
                    confidence: 'Medium',
                    threats: detections,
                    recommendations: recommendations
                };
            } else {
                this.addScanDetail('No malware patterns detected', 'success');
                result = {
                    status: 'Clean',
                    details: 'No malicious code detected',
                    confidence: 'High',
                    threats: [],
                    recommendations: ['Continue monitoring for potential security threats']
                };
            }
            
            this.lastScanResults = result;
            return result;
            
        } catch (error) {
            console.error('Malware scan error:', error);
            this.scanStatus = 'error';
            
            return {
                status: 'Warning',
                details: 'Unable to complete malware scan',
                confidence: 'Low',
                threats: [],
                recommendations: ['Try scanning again', 'Consider manual review of the website']
            };
        }
    }
    
    detectMalwarePatterns(html) {
        const detections = [];
        
        this.malwarePatterns.forEach(pattern => {
            if (pattern.pattern.test(html)) {
                detections.push({
                    pattern: pattern.pattern.toString(),
                    risk: pattern.risk,
                    description: pattern.description,
                    category: pattern.category
                });
            }
        });
        
        return detections;
    }
    
    addScanDetail(message, level = 'info') {
        const detail = {
            timestamp: new Date().toISOString(),
            message: message,
            level: level
        };
        
        if (!this.scanDetails) {
            this.scanDetails = [];
        }
        
        this.scanDetails.push(detail);
        console.log(`MalwareBot: ${message}`);
    }
    
    getProgress() {
        return {
            progress: this.scanProgress || 0,
            status: this.scanStatus || 'idle',
            details: this.scanDetails || [],
            lastResults: this.lastScanResults
        };
    }
    
    async analyzeWithAI(detections, scriptContent) {
        try {
            const anthropic = new Anthropic({
                apiKey: process.env.ANTHROPIC_API_KEY,
            });
            
            const prompt = `Analyze the following potential malware detections and script content. 
            Provide a security assessment and any additional threats you can identify:
            
            DETECTIONS:
            ${JSON.stringify(detections, null, 2)}
            
            SCRIPT CONTENT:
            ${scriptContent.substring(0, 2000)}... (truncated)
            
            Please provide:
            1. Overall threat assessment
            2. Any additional threats not detected by patterns
            3. Recommended actions`;
            
            const response = await anthropic.messages.create({
                model: "claude-3-sonnet-20240229",
                max_tokens: 1000,
                messages: [{ role: "user", content: prompt }]
            });
            
            return {
                aiAnalysis: response.content[0].text,
                timestamp: new Date().toISOString()
            };
        } catch (error) {
            console.error("AI analysis error:", error);
            return {
                aiAnalysis: "AI analysis unavailable at this time.",
                error: error.message,
                timestamp: new Date().toISOString()
            };
        }
    }
}
